# square + nondimensionalization + Qt + perturbation
import numpy as np
import matplotlib.pyplot as plt

# Parameters
lam = 1e-2
Q = 15

# Space
x_min, x_max = -1.0, 1.0
y_min, y_max = -1.0, 1.0
Nx, Ny = 101, 101  # number of points
dx = (x_max - x_min) / (Nx - 1)
dy = (y_max - y_min) / (Ny - 1)

x = np.linspace(x_min, x_max, Nx)
y = np.linspace(y_min, y_max, Ny)
X, Y = np.meshgrid(x, y, indexing='ij')

# Time
dt = 0.0001  # time step
num_steps = 3080  # * dt = total time

# Initialize
np.random.seed(42)
T = np.zeros((Nx, Ny))

# Add asymmetric perturbations
perturb = 0.1 * np.exp(-50*((X-0.5)**2 + (Y-0.5)**2))  # Gaussian.
# sigmaX = 1; sigmaY = 1;
# Z = amp*exp(-((X-x0).^2/(2*sigmaX^2)+(Y-y0).^2/(2*sigmaY^2)));
T += perturb

# Initial b.c.
T[0, :] = T[-1, :] = T[:, 0] = T[:, -1] = Q * 0

# Initialize the temperature, T actually u
# T = np.zeros((Nx, Ny))


for n in range(num_steps):
    t = n * dt

    T_core = T[1:-1, 1:-1].copy()

    # Apply (update) boundary conditions
    T[0, :] = T[-1, :] = T[:, 0] = T[:, -1] = Q * t

    # since dx = dy
    laplacian = np.zeros_like(T)
    laplacian[1:-1, 1:-1] = (T[2:, 1:-1] + T[:-2, 1:-1] - 4 * T[1:-1, 1:-1] + T[1:-1, 2:] + T[1:-1, :-2]) / (dx ** 2)

    reaction = lam * np.exp(T)

    # T = T + dt * (laplacian + reaction)
    T[1:-1, 1:-1] = T_core + dt * (laplacian[1:-1, 1:-1] + reaction[1:-1, 1:-1])


    # check
    if np.any(np.isnan(T)) or np.any(np.isinf(T)):
        print(f"T diverges from the step size {n} (time t = {t:.4f})")
        print(f"Max T: {np.nanmax(T):.2e}")
        break


print("Max temperature:", np.max(T))
print("Min temperature:", np.min(T))


# Plot
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')

T_plot = T.T
surf = ax.plot_surface(X, Y, T_plot, cmap='cool',
                      rstride=2, cstride=2,
                      linewidth=0, antialiased=True)

cbar = fig.colorbar(surf, shrink=0.5, aspect=10)
cbar.set_label('u', fontsize=12)

ax.view_init(elev=10, azim=30)  # angles

ax.set_xlabel('x', fontsize=12, labelpad=10)
ax.set_ylabel('y', fontsize=12, labelpad=10)
ax.set_zlabel('u', fontsize=12, labelpad=10)
# ax.set_title(f"Final Temperature at t = {num_steps * dt:.4f}", fontsize=14, pad=20)
ax.set_zlim(T.min()-0.02, T.max()+0.02)

plt.tight_layout()
plt.show()


plt.figure(figsize=(8, 6))
plt.contourf(X, Y, T, levels=50, cmap='cool')
plt.colorbar(label='u')
# plt.title(f"Final Temperature at t = {num_steps * dt:.4f}")
plt.xlabel("x",fontsize=12, labelpad=10)
plt.ylabel("y",fontsize=12, labelpad=10)
plt.xlim(x_min, x_max)
plt.ylim(y_min, y_max)
plt.show()
