import math
import numpy as np
import matplotlib.pyplot as plt

number_of_iterations = 250000
number_of_graphs = 5
number_of_iterations_per_graph = number_of_iterations//number_of_graphs

number_of_points = int(101)

delta_tau = 0.0001
delta_X = 2/number_of_points
lambda_ = 0.85
r = delta_tau/delta_X**2

if r > 1/2:
    print("Von Neumann stability criterion has not been met (r < 1/2)")

left_boundary_condition = 0
right_boundary_condition = 0

boundary_state = []
for i in range(0,number_of_points):
    boundary_state.append(0)
boundary_state[0] = left_boundary_condition
boundary_state[-1] = right_boundary_condition

state = boundary_state
plots = []

def heat_diffusion_function(i):
    return state[i+1]*(r) + state[i]*(1-2*r) + state[i-1]*(r) + lambda_*delta_tau*math.exp(state[i])

def new_state_function(iteration):
    new_state = []
    for i in range(0,number_of_points):
        if i == 0:
            new_state.append(left_boundary_condition)
        elif i == number_of_points-1:
            new_state.append(right_boundary_condition)
        else:
            new_state.append(heat_diffusion_function(i))
    if iteration%number_of_iterations_per_graph == 0:
        plots.append(new_state)
    for state_position in range(0,number_of_points):
        state[state_position] = new_state[state_position]
    return state

percent = math.floor(number_of_iterations/20)
list_of_percent = []
for i in range(0,20):
    list_of_percent.append(i*percent)


for iteration in range(0,number_of_iterations):
    new_state_function(iteration)
    if iteration in list_of_percent:
        print(100*iteration/number_of_iterations, "%")

x = np.linspace(-1,1,number_of_points)
for plot in range(0,number_of_graphs):
    plt.plot(x,plots[plot])
    
plt.show()
